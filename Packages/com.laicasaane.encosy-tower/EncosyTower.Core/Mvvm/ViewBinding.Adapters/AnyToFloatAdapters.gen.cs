/// <auto-generated>
///************************************************************///
///                                                            ///
/// This file is auto-generated by AnyToFloatAdaptersGenerator ///
///                 DO NOT manually modify it!                 ///
///                                                            ///
///************************************************************///
/// </auto-generated>

#pragma warning disable

using System;
using EncosyTower.Annotations;
using EncosyTower.Variants;

namespace EncosyTower.Mvvm.ViewBinding.Adapters
{
    [Serializable]
    [Label("Byte ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(byte), destType: typeof(float), order: 0)]
    public sealed class ByteToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out byte result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("SByte ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(sbyte), destType: typeof(float), order: 0)]
    public sealed class SByteToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out sbyte result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Char ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(char), destType: typeof(float), order: 0)]
    public sealed class CharToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out char result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Double ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(double), destType: typeof(float), order: 0)]
    public sealed class DoubleToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out double result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Float ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(float), destType: typeof(float), order: 0)]
    public sealed class FloatToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out float result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Int ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(int), destType: typeof(float), order: 0)]
    public sealed class IntToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out int result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("UInt ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(uint), destType: typeof(float), order: 0)]
    public sealed class UIntToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out uint result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Long ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(long), destType: typeof(float), order: 0)]
    public sealed class LongToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out long result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("ULong ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(ulong), destType: typeof(float), order: 0)]
    public sealed class ULongToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out ulong result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("Short ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(short), destType: typeof(float), order: 0)]
    public sealed class ShortToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out short result))
            {
                return (float)result;
            }

            return variant;
        }
    }

    [Serializable]
    [Label("UShort ⇒ Float", "Default")]
    [Adapter(sourceType: typeof(ushort), destType: typeof(float), order: 0)]
    public sealed class UShortToFloatAdapter : IAdapter
    {
        public Variant Convert(in Variant variant)
        {
            if (variant.TryGetValue(out ushort result))
            {
                return (float)result;
            }

            return variant;
        }
    }

}

