#if UNITY_EDITOR

using System;
using System.IO;
using System.Reflection;
using EncosyTower.Annotations;
using UnityEditor;
using UnityEngine;

namespace EncosyTower.CodeGen
{
    public static class CodeGenAPI
    {
        public static bool TryGetOutputFolderPath(
              string fileName
            , out string path
            , string extension = "cs"
            , bool rootIsAssets = false
        )
        {
            var candidates = AssetDatabase.FindAssets($"{fileName} t:Script");

            if (candidates.Length < 1)
            {
                goto FAILED;
            }

            foreach (var guid in candidates)
            {
                var relativePath = AssetDatabase.GUIDToAssetPath(guid);
                var fileNameWithExtension = Path.GetFileName(relativePath);

                if (fileNameWithExtension != $"{fileName}.{extension}")
                {
                    continue;
                }

                path = Path.GetDirectoryName(relativePath);

                if (rootIsAssets)
                {
                    path = Path.GetRelativePath("Assets", path);
                }

                return true;
            }

        FAILED:
            {
                path = default;
                return false;
            }
        }

        public static bool TryGetOutputFolderPath(
              Type type
            , out string path
            , bool rootIsAssets = false
        )
        {
            var filePathAttrib = type.GetCustomAttribute<ThisFilePathAttribute>();

            if (filePathAttrib == null)
            {
                path = string.Empty;
                return false;
            }

            var rootPath = rootIsAssets ? Application.dataPath : Path.Combine(Application.dataPath, "..");
            var filePath = Path.GetRelativePath(rootPath, filePathAttrib.FilePath);
            path = Path.GetDirectoryName(filePath);
            return true;
        }

        public static Printer PrintAutoGeneratedBlock(
              ref this Printer p
            , string generatorName
            , string resourcePath = ""
        )
        {
            if (string.IsNullOrWhiteSpace(generatorName))
            {
                generatorName = "Untitled Code Generator";
            }

            var generatorNameLength = generatorName.Length;
            var resourcePathLength = 0;

            if (string.IsNullOrWhiteSpace(resourcePath) == false)
            {
                resourcePathLength = resourcePath.Length;
            }

            var generatorLineLength = 31 + generatorNameLength;
            var starCount = Mathf.Max(resourcePathLength, generatorLineLength);

            p.PrintLine("/// <auto-generated>");
            p.PrintBeginLine("///*");
            p.Print('*', starCount);
            p.PrintEndLine("*///");

            p.PrintBeginLine("/// ");
            p.Print(' ', starCount);
            p.PrintEndLine(" ///");

            {
                var spaceCount = Mathf.Max(starCount - generatorLineLength, 0);
                var firstPartCount = (int)Math.Floor(spaceCount / 2f);
                var lastPartCount = (int)Math.Ceiling(spaceCount / 2f);

                p.PrintBeginLine("/// ");
                p.Print(' ', firstPartCount);
                p.Print("This file is auto-generated by ");
                p.Print(generatorName);
                p.Print(' ', lastPartCount);
                p.PrintEndLine(" ///");
            }

            if (resourcePathLength > 0)
            {
                var spaceCount = Mathf.Max(starCount - resourcePathLength, 0);
                var firstPartCount = (int)Math.Floor(spaceCount / 2f);
                var lastPartCount = (int)Math.Ceiling(spaceCount / 2f);

                p.PrintBeginLine("/// ");
                p.Print(' ', firstPartCount);
                p.Print(resourcePath);
                p.Print(' ', lastPartCount);
                p.PrintEndLine(" ///");
            }

            {
                var spaceCount = Mathf.Max(starCount - 26, 0);
                var firstPartCount = (int)Math.Floor(spaceCount / 2f);
                var lastPartCount = (int)Math.Ceiling(spaceCount / 2f);

                p.PrintBeginLine("/// ");
                p.Print(' ', firstPartCount);
                p.Print("DO NOT manually modify it!");
                p.Print(' ', lastPartCount);
                p.PrintEndLine(" ///");
            }

            p.PrintBeginLine("/// ");
            p.Print(' ', starCount);
            p.PrintEndLine(" ///");

            p.PrintBeginLine("///*");
            p.Print('*', starCount);
            p.PrintEndLine("*///");
            p.PrintLine("/// </auto-generated>");

            return p;
        }

        public static string GetBuiltInNameOrDefault(this Type type)
        {
            if (type == null) return string.Empty;

            return type.FullName switch {
                "System.Boolean" => "bool",
                "System.Byte" => "byte",
                "System.SByte" => "sbyte",
                "System.Char" => "char",
                "System.Decimal" => "decimal",
                "System.Double" => "double",
                "System.Single" => "float",
                "System.Int32" => "int",
                "System.UInt32" => "uint",
                "System.IntPtr" => "nint",
                "System.UIntPtr" => "nuint",
                "System.Int64" => "long",
                "System.UInt64" => "ulong",
                "System.Int16" => "short",
                "System.UInt16" => "ushort",
                "System.Object" => "object",
                "System.String" => "string",
                _ => type.FullName,
            };
        }
    }
}

#endif
