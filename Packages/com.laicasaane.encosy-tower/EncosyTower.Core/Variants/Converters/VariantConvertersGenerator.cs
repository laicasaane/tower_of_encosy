#if UNITY_EDITOR && ANNULUS_CODEGEN && ENCOSY_MVVM_ADAPTERS_GENERATOR

using System;
using EncosyTower.CodeGen;
using UnityCodeGen;

namespace EncosyTower.Editor.Mvvm.Variants.Converters
{
    [Generator]
    internal class VariantConvertersGenerator : ICodeGenerator
    {
        private static readonly string[] s_variantTypes = new string[] {
            "bool",
            "byte",
            "sbyte",
            "char",
            "double",
            "float",
            "int",
            "uint",
            "long",
            "ulong",
            "short",
            "ushort",
        };

        private static readonly string[] s_variantTypeNames = new string[] {
            "Bool",
            "Byte",
            "SByte",
            "Char",
            "Double",
            "Float",
            "Int",
            "UInt",
            "Long",
            "ULong",
            "Short",
            "UShort",
        };

        private const string AGGRESSIVE_INLINING = "[MethodImpl(MethodImplOptions.AggressiveInlining)]";

        public void Execute(GeneratorContext context)
        {
            var nameofGenerator = nameof(VariantConvertersGenerator);

            if (CodeGenAPI.TryGetOutputFolderPath(nameofGenerator, out var outputPath) == false)
            {
                context.OverrideFolderPath("Assets");
                return;
            }

            var p = Printer.DefaultLarge;
            p.PrintAutoGeneratedBlock(nameofGenerator);
            p.PrintEndLine();
            p.PrintLine(@"#pragma warning disable

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using UnityEngine;
");

            p.PrintLine("namespace EncosyTower.Variants.Converters");
            p.OpenScope();
            {
                var variantTypes = s_variantTypes.AsSpan();
                var variantTypeNames = s_variantTypeNames.AsSpan();

                p.PrintLine("partial class VariantConverter");
                p.OpenScope();
                {
                    p.PrintLine("static partial void TryRegisterGeneratedConverters()");
                    p.OpenScope();
                    {
                        for (var i = 0; i < variantTypes.Length; i++)
                        {
                            var typeName = variantTypeNames[i];

                            p.PrintBeginLine("TryRegister(VariantConverter").Print(typeName)
                                .PrintEndLine(".Default);");
                        }
                    }
                    p.CloseScope();
                }
                p.CloseScope();
                p.PrintEndLine();

                for (var i = 0; i < variantTypes.Length; i++)
                {
                    var type = variantTypes[i];
                    var typeName = variantTypeNames[i];

                    p.PrintBeginLine("internal sealed class VariantConverter").Print(typeName)
                        .Print(" : IVariantConverter<").Print(type).PrintEndLine(">");
                    p.OpenScope();
                    {
                        p.PrintBeginLine("public static readonly VariantConverter")
                            .Print(typeName)
                            .Print(" Default = new VariantConverter")
                            .Print(typeName)
                            .PrintEndLine("();")
                            .PrintEndLine();

                        p.PrintBeginLine("private VariantConverter").Print(typeName).PrintEndLine("() { }")
                            .PrintEndLine();

                        p.PrintLine(AGGRESSIVE_INLINING);
                        p.PrintBeginLine("public Variant ToVariant(").Print(type)
                            .PrintEndLine(" value) => new Variant(value);")
                            .PrintEndLine();

                        p.PrintLine(AGGRESSIVE_INLINING);
                        p.PrintBeginLine("public Variant<").Print(type).Print("> ToVariantT(")
                            .Print(type).PrintEndLine(" value) => new Variant(value);")
                            .PrintEndLine();

                        p.PrintBeginLine("public ").Print(type).PrintEndLine(" GetValue(in Variant variant)");
                        p.OpenScope();
                        {
                            p.PrintBeginLine("if (variant.TryGetValue(out ").Print(type).PrintEndLine(" result) == false)");
                            p.OpenScope();
                            {
                                p.PrintLine("ThrowIfInvalidCast();");
                            }
                            p.CloseScope();
                            p.PrintEndLine();

                            p.PrintLine("return result;");
                        }
                        p.CloseScope();
                        p.PrintEndLine();

                        p.PrintLine(AGGRESSIVE_INLINING);
                        p.PrintBeginLine("public bool TryGetValue(in Variant variant, out ").Print(type)
                            .PrintEndLine(" result) => variant.TryGetValue(out result);")
                            .PrintEndLine();

                        p.PrintLine(AGGRESSIVE_INLINING);
                        p.PrintBeginLine("public bool TrySetValueTo(in Variant variant, ref ").Print(type)
                            .PrintEndLine(" dest) => variant.TrySetValueTo(ref dest);")
                            .PrintEndLine();

                        p.PrintLine(AGGRESSIVE_INLINING);
                        p.PrintBeginLine("public string ToString(in Variant variant) => variant.").Print(typeName)
                            .PrintEndLine(".ToString();")
                            .PrintEndLine();

                        p.PrintLine("[HideInCallstack, DoesNotReturn]");
                        p.PrintLine("[Conditional(\"UNITY_EDITOR\"), Conditional(\"DEVELOPMENT_BUILD\")]");
                        p.PrintLine("private static void ThrowIfInvalidCast()");
                        p.OpenScope();
                        {
                            p.PrintBeginLine("throw new InvalidCastException($\"Cannot get value of {typeof(")
                                .Print(type)
                                .PrintEndLine(")} from the input variant.\");");
                        }
                        p.CloseScope();
                        p.PrintEndLine();
                    }
                    p.CloseScope();
                    p.PrintEndLine();
                }
            }
            p.CloseScope();
            p.PrintEndLine();

            context.OverrideFolderPath(outputPath);
            context.AddCode($"VariantConverters.gen.cs", p.Result);
        }
    }
}

#endif
