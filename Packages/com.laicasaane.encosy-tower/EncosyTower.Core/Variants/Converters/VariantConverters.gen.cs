/// <auto-generated>
///*********************************************************///
///                                                         ///
/// This file is auto-generated by VariantConvertersGenerator ///
///               DO NOT manually modify it!                ///
///                                                         ///
///*********************************************************///
/// </auto-generated>

#pragma warning disable

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace EncosyTower.Variants.Converters
{
    partial class VariantConverter
    {
        static partial void TryRegisterGeneratedConverters()
        {
            TryRegister(VariantConverterBool.Default);
            TryRegister(VariantConverterByte.Default);
            TryRegister(VariantConverterSByte.Default);
            TryRegister(VariantConverterChar.Default);
            TryRegister(VariantConverterDouble.Default);
            TryRegister(VariantConverterFloat.Default);
            TryRegister(VariantConverterInt.Default);
            TryRegister(VariantConverterUInt.Default);
            TryRegister(VariantConverterLong.Default);
            TryRegister(VariantConverterULong.Default);
            TryRegister(VariantConverterShort.Default);
            TryRegister(VariantConverterUShort.Default);
        }
    }

    internal sealed class VariantConverterBool : IVariantConverter<bool>
    {
        public static readonly VariantConverterBool Default = new VariantConverterBool();

        private VariantConverterBool() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(bool value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<bool> ToVariantT(bool value) => new Variant(value);

        public bool GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out bool result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out bool result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref bool dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Bool.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(bool)} from the input variant.");
        }

    }

    internal sealed class VariantConverterByte : IVariantConverter<byte>
    {
        public static readonly VariantConverterByte Default = new VariantConverterByte();

        private VariantConverterByte() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(byte value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<byte> ToVariantT(byte value) => new Variant(value);

        public byte GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out byte result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out byte result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref byte dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Byte.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(byte)} from the input variant.");
        }

    }

    internal sealed class VariantConverterSByte : IVariantConverter<sbyte>
    {
        public static readonly VariantConverterSByte Default = new VariantConverterSByte();

        private VariantConverterSByte() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(sbyte value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<sbyte> ToVariantT(sbyte value) => new Variant(value);

        public sbyte GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out sbyte result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out sbyte result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref sbyte dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.SByte.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(sbyte)} from the input variant.");
        }

    }

    internal sealed class VariantConverterChar : IVariantConverter<char>
    {
        public static readonly VariantConverterChar Default = new VariantConverterChar();

        private VariantConverterChar() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(char value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<char> ToVariantT(char value) => new Variant(value);

        public char GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out char result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out char result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref char dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Char.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(char)} from the input variant.");
        }

    }

    internal sealed class VariantConverterDouble : IVariantConverter<double>
    {
        public static readonly VariantConverterDouble Default = new VariantConverterDouble();

        private VariantConverterDouble() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(double value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<double> ToVariantT(double value) => new Variant(value);

        public double GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out double result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out double result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref double dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Double.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(double)} from the input variant.");
        }

    }

    internal sealed class VariantConverterFloat : IVariantConverter<float>
    {
        public static readonly VariantConverterFloat Default = new VariantConverterFloat();

        private VariantConverterFloat() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(float value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<float> ToVariantT(float value) => new Variant(value);

        public float GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out float result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out float result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref float dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Float.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(float)} from the input variant.");
        }

    }

    internal sealed class VariantConverterInt : IVariantConverter<int>
    {
        public static readonly VariantConverterInt Default = new VariantConverterInt();

        private VariantConverterInt() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(int value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<int> ToVariantT(int value) => new Variant(value);

        public int GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out int result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out int result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref int dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Int.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(int)} from the input variant.");
        }

    }

    internal sealed class VariantConverterUInt : IVariantConverter<uint>
    {
        public static readonly VariantConverterUInt Default = new VariantConverterUInt();

        private VariantConverterUInt() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(uint value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<uint> ToVariantT(uint value) => new Variant(value);

        public uint GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out uint result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out uint result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref uint dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.UInt.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(uint)} from the input variant.");
        }

    }

    internal sealed class VariantConverterLong : IVariantConverter<long>
    {
        public static readonly VariantConverterLong Default = new VariantConverterLong();

        private VariantConverterLong() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(long value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<long> ToVariantT(long value) => new Variant(value);

        public long GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out long result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out long result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref long dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Long.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(long)} from the input variant.");
        }

    }

    internal sealed class VariantConverterULong : IVariantConverter<ulong>
    {
        public static readonly VariantConverterULong Default = new VariantConverterULong();

        private VariantConverterULong() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(ulong value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<ulong> ToVariantT(ulong value) => new Variant(value);

        public ulong GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out ulong result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out ulong result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref ulong dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.ULong.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(ulong)} from the input variant.");
        }

    }

    internal sealed class VariantConverterShort : IVariantConverter<short>
    {
        public static readonly VariantConverterShort Default = new VariantConverterShort();

        private VariantConverterShort() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(short value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<short> ToVariantT(short value) => new Variant(value);

        public short GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out short result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out short result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref short dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.Short.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(short)} from the input variant.");
        }

    }

    internal sealed class VariantConverterUShort : IVariantConverter<ushort>
    {
        public static readonly VariantConverterUShort Default = new VariantConverterUShort();

        private VariantConverterUShort() { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant ToVariant(ushort value) => new Variant(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Variant<ushort> ToVariantT(ushort value) => new Variant(value);

        public ushort GetValue(in Variant variant)
        {
            if (variant.TryGetValue(out ushort result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Variant variant, out ushort result) => variant.TryGetValue(out result);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Variant variant, ref ushort dest) => variant.TrySetValueTo(ref dest);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Variant variant) => variant.UShort.ToString();

        [HideInCallstack, DoesNotReturn]
        [Conditional("UNITY_EDITOR"), Conditional("DEVELOPMENT_BUILD")]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(ushort)} from the input variant.");
        }

    }

}

