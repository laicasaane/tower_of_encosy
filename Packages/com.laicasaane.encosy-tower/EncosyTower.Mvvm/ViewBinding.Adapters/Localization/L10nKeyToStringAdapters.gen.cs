#if UNITY_LOCALIZATION

/// <auto-generated>
///*****************************************************************///
///                                                                 ///
/// This file is auto-generated by L10nKeyToStringAdaptersGenerator ///
///                   DO NOT manually modify it!                    ///
///                                                                 ///
///*****************************************************************///
/// </auto-generated>

// ReSharper disable InconsistentNaming

#pragma warning disable

using System;
using EncosyTower.Annotations;
using EncosyTower.Localization;
using EncosyTower.Unions;
using EncosyTower.Unions.Converters;

namespace EncosyTower.Mvvm.ViewBinding.Adapters.Localization
{
    [Serializable]
    [Label("L10nKey ⇒ Entry Key", "Default")]
    [Adapter(sourceType: typeof(L10nKey), destType: typeof(string), order: 0)]
    public class L10nKeyToEntryKeyAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey> _converter = CachedUnionConverter<L10nKey>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey key) && key.IsValid)
            {
                return key.Entry.Key;
            }

            return union;
        }
    }

    [Serializable]
    [Label("L10nKey ⇒ Table Collection Name", "Default")]
    [Adapter(sourceType: typeof(L10nKey), destType: typeof(string), order: 1)]
    public class L10nKeyToTableCollectionNameAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey> _converter = CachedUnionConverter<L10nKey>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey key) && key.IsValid)
            {
                return key.Table.TableCollectionName;
            }

            return union;
        }
    }

    [Serializable]
    [Label("L10nKey ⇒ Table & Key Format: \"table,key\"", "Default")]
    [Adapter(sourceType: typeof(L10nKey), destType: typeof(string), order: 2)]
    public class L10nKeyToTableAndKeyFormatAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey> _converter = CachedUnionConverter<L10nKey>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey key) && key.IsValid)
            {
                return key.ToString();
            }

            return union;
        }
    }

    [Serializable]
    [Label("L10nKey<string> ⇒ Entry Key", "Default")]
    [Adapter(sourceType: typeof(L10nKey<string>), destType: typeof(string), order: 0)]
    public class L10nKeyStringToEntryKeyAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey<string>> _converter = CachedUnionConverter<L10nKey<string>>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey<string> key) && key.IsValid)
            {
                return key.Entry.Key;
            }

            return union;
        }
    }

    [Serializable]
    [Label("L10nKey<string> ⇒ Table Collection Name", "Default")]
    [Adapter(sourceType: typeof(L10nKey<string>), destType: typeof(string), order: 1)]
    public class L10nKeyStringToTableCollectionNameAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey<string>> _converter = CachedUnionConverter<L10nKey<string>>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey<string> key) && key.IsValid)
            {
                return key.Table.TableCollectionName;
            }

            return union;
        }
    }

    [Serializable]
    [Label("L10nKey<string> ⇒ Table & Key Format: \"table,key\"", "Default")]
    [Adapter(sourceType: typeof(L10nKey<string>), destType: typeof(string), order: 2)]
    public class L10nKeyStringToTableAndKeyFormatAdapter : IAdapter
    {
        private readonly CachedUnionConverter<L10nKey<string>> _converter = CachedUnionConverter<L10nKey<string>>.Default;

        public Union Convert(in Union union)
        {
            if (_converter.TryGetValue(union, out L10nKey<string> key) && key.IsValid)
            {
                return key.ToString();
            }

            return union;
        }
    }

}

#endif

